from collections import defaultdict
from collections import deque
import heapq
import time

#FUNCIÓN PARA IMPRIMIR GAFO
#MUESTRA EL GRAFO
def imprimir(grafo):
	print("Grafo: \n")
	for key, lista in grafo.items():
		print(key)
		print(lista)
print("--------------------------------")

#FUNCIÓN PARA VERIFICAR VALIDEX DE NODOS
def verificacion(nodo):
  bandera = False
  todos_los_nodos = ['Cabo San Lucas','La Paz','Santo Domingo','Santa Rosalia','Santa Quintin','Ensenada','San Felipe','Tijuana','Mexicalli','Santa Ana','Agua Prieta','Hermosillo','Janos','Guaymas','Ciudad Obregon','Chihuahua','Juarez','Topolobampo','Hidalgo del Parral','Culiacan','Mazatlan','Tepic','Ojinaga','Monclava','Torreon','Piedras Negras','Nuevo Laredo','Reynosa','Matamoros','Ciudad Victoria','Soto la Marina','Monterrey','Durango','Zacatecas','San Luis Potosi','Aguascalientes','Guanajuato','Guadalajara','Manzanillo','Colima','Salamanca','Atlacomulco','Queretaro','Tlaxcala','Tampico','Tuxpan de Rodiguez Cano','Pachuca de Soto','Playa Azul','Zihuatanejo','Ciudad Altamirano','Iguala','Chilpancingo','Acapulco','Pinotepa Nacional','Puerto Angel','Oaxaca','Cdmx','Cuernavaca','Puebla','Vercruz','Cordoba','Izucar de Matamoros','Tehuacan','Oaxaca','Alvarado','Acayucan','Tehuantepec','Tuxtla','Villa Hermosa','Ciudad del Carmen','Campeche','Merida','Francisco Escarcega','Chetumal','Felipe Carrillo Puerto','Valladolid','Cancún']
  #for elemento in todos_los_nodos:
  if nodo in todos_los_nodos: 
        print("El elemento", nodo, "está en la lista, puede continuar...\n") 
        bandera = True
        return bandera
  else: 
        print("El elemento", nodo, "no está en la lista, intente de nuevo...\n")
        return bandera

#FUNCIÓN PARA COMPARACIÓN DE PESOS
def compara_pesos(grafo):
    pesos = set()
    for nodo, edges in grafo.items():
        for edge in edges:
            peso = edge[1]
            pesos.add(peso)
    if len(pesos) > 1:
        print("No todos los pesos son iguales")
    else:
        print("Todos los pesos son iguales")


#BÚSQUEDA A LO ANCHO
def Busqueda_a_lo_ancho(grafo, origen, destino):
	visitados = []
	caminos = [[origen]]
	porVisitar = [] 
	
	if origen == destino:
		print("Ya se encuentra en el destino")
		return
	
	while caminos:
		ruta = caminos.pop(0)
		actual = ruta[-1]

		if actual not in visitados:
			for key, lista in grafo[actual]:
				if key not in visitados:
					porVisitar.append(key)
		 
			for hijo in porVisitar:
				ruta_actual = list(ruta)
				ruta_actual.append(hijo)
				caminos.append(ruta_actual)
				
				if hijo == destino:
					print("Mejor camino = ", ' -> '.join(ruta_actual))
					return
			visitados.append(actual)
	 
	print("No existe una manera de llegar de ese desde ", *origen," hasta ", *destino)
	return


#BÚSQUEDA DIJKSTRA
def dijkstra(grafo, inicio, fin):
    # Inicializar distancia a cada nodo como infinita, excepto al nodo inicial que tiene distancia 0
    distancias = {nodo: float('inf') for nodo in grafo}
    distancias[inicio] = 0

    # Inicializar cola con el nodo inicial y su distancia
    cola = [(0, inicio)]

    # Inicializar diccionario para llevar registro del camino más corto a cada nodo
    camino = {inicio: []}

    while cola:
        # Obtener el nodo con menor distancia hasta el momento
        (dist, nodo_actual) = heapq.heappop(cola)

        # Si llegamos al nodo final, retornar el camino más corto y su distancia
        if nodo_actual == fin:
            return (dist, camino[nodo_actual] + [nodo_actual])

        # Si ya procesamos el nodo actual en una iteración previa, continuar con el siguiente
        if dist > distancias[nodo_actual]:
            continue

        # Recorrer los nodos hijos del nodo actual
        for hijo, peso in grafo[nodo_actual].items():
            # Calcular la distancia acumulada con el nodo hijo
            nueva_distancia = dist + peso

            # Si encontramos un camino más corto, actualizar la distancia y la cola
            if nueva_distancia < distancias[hijo]:
                distancias[hijo] = nueva_distancia
                heapq.heappush(cola, (nueva_distancia, hijo))
                camino[hijo] = camino[nodo_actual] + [nodo_actual]

    # Si no encontramos una ruta al nodo final, regresar None
    return None
	
#BÚSQUEDA POR PROFUNDIDAD SIMPLE
# Definimos la función para realizar la búsqueda por profundidad
def busqueda_profundidad_con_peso(grafo, nodo_inicial, nodo_final):
    # Creamos una lista para almacenar los nodos visitados
    visitados = []
    # Creamos una pila para almacenar los nodos por visitar
    pila = [(nodo_inicial, [])]
    # Mientras la pila no esté vacía
    while pila:
        # Obtenemos el siguiente nodo a visitar y la ruta hasta el mismo
        nodo, ruta = pila.pop()
        # Si no hemos visitado el nodo aún
        if nodo not in visitados:
            # Lo añadimos a la lista de visitados
            visitados.append(nodo)
            # Si llegamos al nodo final, terminamos la búsqueda
            if nodo == nodo_final:
                ruta.append(nodo)
                break
            # Obtenemos los vecinos del nodo actual
            vecinos = grafo[nodo]
            # Añadimos los vecinos a la pila para visitarlos posteriormente
            for vecino, peso_vecino in vecinos.items():
                pila.append((vecino, ruta + [nodo]))
    # Devolvemos la ruta encontrada
    return ruta


#BÚSQUEDA POR PROFUNDIDAD ITERATIVA
# Definimos la función para realizar la búsqueda por profundidad iterativa
def busqueda_profundidad_iterativa(grafo, nodo_inicial, nodo_final):
    # Iteramos sobre la profundidad máxima desde 0 hasta el infinito
    for profundidad_maxima in range(len(grafo)):
        # Creamos una lista para almacenar los nodos visitados
        visitados = []
        # Creamos una pila para almacenar los nodos por visitar
        pila = [(nodo_inicial, 0)]
        # Mientras la pila no esté vacía
        while pila:
            # Obtenemos el siguiente nodo a visitar y su profundidad
            nodo, profundidad = pila.pop()
            # Si no hemos visitado el nodo aún y su profundidad es menor o igual a la profundidad máxima
            if nodo not in visitados and profundidad <= profundidad_maxima:
                # Lo añadimos a la lista de visitados
                visitados.append(nodo)
                # Si llegamos al nodo final, terminamos la búsqueda
                if nodo == nodo_final:
                    return visitados
                # Obtenemos los vecinos del nodo actual y sus pesos
                vecinos = grafo[nodo]
                # Añadimos los vecinos a la pila con una profundidad mayor en 1
                for vecino, peso in vecinos.items():
                    pila.append((vecino, profundidad + 1))
    # Si no se encuentra la solución, devolvemos una lista vacía
    return [] 

#BÚSQUEDA POR PROFUNDIDAD LIMITADA
def profundidad_limitada(grafo, actual, meta, limite, ruta, visitados):
    #Se agrega el origen a la lista de visitados
    visitados.append(actual)
    #Verifiación si el nodo actual es la meta o si el limite es igual a 0
    if actual == meta or limite == 0:
        #Verificación que el nodo actual es la meta
        if actual == meta:
            #Verificaicón si el nodo actual no esta en la ruta
          if actual not in ruta:
              #Si el nodo actual no esta en ruta lo agrega
              ruta.append(actual)
          print(ruta)
        return
    for hijo in grafo[actual]:
        #Si el hijo del nodo actual no esta en visitados, lo agrega 
        if hijo not in visitados:
            ruta.append(hijo)
            profundidad_limitada(grafo, hijo, meta, limite-1, ruta, visitados)
            ruta.pop()              


#BUSQUEDA BIDIRECCIONAL (A LO ANCHO)
def bfs_bidireccional(grafo_normal, grafo_inverso, inicio, destino):
    # Colas de búsqueda desde el inicio y el destino
    cola_inicio = deque([(inicio, [inicio])])
    cola_destino = deque([(destino, [destino])])

    # Conjuntos de nodos visitados desde el inicio y el destino
    visitados_inicio = set([inicio])
    visitados_destino = set([destino])

    # Búsqueda desde el inicio y el destino simultáneamente
    while cola_inicio and cola_destino:
        # Búsqueda desde el inicio
        nodo_inicio, ruta_inicio = cola_inicio.popleft()
        for vecino_inicio, peso_inicio in grafo_normal.get(nodo_inicio, []):
            if vecino_inicio not in visitados_inicio:
                visitados_inicio.add(vecino_inicio)
                nueva_ruta_inicio = ruta_inicio + [vecino_inicio]
                cola_inicio.append((vecino_inicio, nueva_ruta_inicio))
                if vecino_inicio in visitados_destino:
                    interseccion = vecino_inicio
                    ruta_destino = nueva_ruta_inicio[::-1] + [nodo for nodo in cola_destino.popleft()[1]]
                    return ruta_inicio + ruta_destino[1:], interseccion

        # Búsqueda desde el destino
        nodo_destino, ruta_destino = cola_destino.popleft()
        for vecino_destino, peso_destino in grafo_inverso.get(nodo_destino, []):
            if vecino_destino not in visitados_destino:
                visitados_destino.add(vecino_destino)
                nueva_ruta_destino = ruta_destino + [vecino_destino]
                cola_destino.append((vecino_destino, nueva_ruta_destino))
                if vecino_destino in visitados_inicio:
                    interseccion = vecino_destino
                    ruta_inicio = nueva_ruta_destino[::-1] + [nodo for nodo in cola_inicio.popleft()[1]]
                    return ruta_inicio + ruta_destino[1:], interseccion

    return None, None


#CREACIÓN DE GRAFOS
#Grafo de busqueda a lo ancho
#Grafo con los pesos iguales a 5 en todas las rutas
grafo_pesos_iguales = {
    		'Cancún': [('Valladolid',5), ('Felipe Carrillo Puerto',5)],
		  	'Valladolid' : [('Felipe Carrillo Puerto',5)],
      		'Felipe Carrillo Puerto': [('Campeche',5)],
			'Campeche': [('Merida',5),('Chetumal',5),('Ciudad del Carmen',5) ],
			'Merida':[],
			'Chetumal': [('Francisco Escarcega',5)],
			'Francisco Escarcega' : [],
			'Ciudad del Carmen': [('Villa Hermosa',5),('Tuxtla',5)],
			'Villa Hermosa': [('Acayucan',5)], 
			'Tuxtla': [('Acayucan',5)],
			'Acayucan': [('Tehuantepec',5), ('Alvarado',5)],
			'Tehuantepec' : [],
			'Alvarado'  : [('Oaxaca',5)],
			'Oaxaca' : [('Puerto Angel',5),('Tehuacan',5),('Izucar de Matamoros',5)],
			'Tehuacan' : [],
			'Puerto Angel' : [('Pinotepa Nacional',5)],
			'Pinotepa Nacional' : [('Acapulco',5)],
			'Acapulco' : [('Chilpancingo',5)],
			'Chilpancingo' : [('Iguala',5)],
			'Iguala' : [('Cuernavaca',5),('Ciudad Altamirano',5)],
			'Izucar de Matamoros' : [('Puebla',5),('Cuernavaca',5)],
			'Puebla' : [('Cordoba',5),('Cdmx',5)],
			'Cordoba' : [('Veracruz',5)],
			'Veracruz' : [],
			'Cuernavaca' : [('Cdmx',5), ('Ciudad Altamirano',5)],
			'Cdmx' : [('Pachuca de Soto',5),('Queretaro',5),('Toluca de Lerdo',5),('Tlaxcala',5)],
			'Tlaxcala' : [],
			'Toluca de Lerdo' : [('Ciudad Altamirano',5)],
			'Ciudad Altamirano' : [('Zihuatanejo',5)],
			'Zihuatanejo' : [('Playa Azul',5)],
			'Playa Azul' : [('Morelia',5), ('Colima',5), ('Manzanillo',5)],
			'Morelia' : [('Colima',5), ('Salamanca',5)],
			'Colima' : [('Manzanillo',5), ('Guadalajara',5)],
			'Manzanillo' : [('Guadalajara',5)],
			'Guadalajara' : [('Tepic',5),('Aguascalientes',5)],
			'Salamanca' : [('Guanajuato',5),('Guadalajara',5)],
      		'Guanajuato' : [('Aguascalientes',5)],
      		'Aguascalientes' : [('San Luis Potosi',5)],
			'Queretaro' : [('Salamanca',5), ('Atlacomulco',5), ('San Luis Potosi',5)],
			'Atlacomulco' : [],
			'Pachuca de Soto' : [('Tuxpan de Rodiguez Cano',5)],
			'Tuxpan de Rodiguez Cano' : [('Tampico',5)],
			'Tampico' : [('Ciudad Victoria',5)],
			'Ciudad Victoria' : [('Soto la Marina',5), ('Matamoros',5), ('Monterrey',5), ('Durango',5)],
			'Soto la Marina' : [],
			'San Luis Potosi' : [('Zacatecas', 5), ('Durango',5)],
			'Zacatecas' :  [],
			'Tepic' : [('Mazatlan', 5)],
			'Mazatlan' : [('Culiacan',5)],
			'Durango' : [('Mazatlan', 5),('Hidalgo del Parral', 5)],
			'Matamoros' : [('Reynosa',5)],
			'Reynosa' : [('Nuevo Laredo',5)],
			'Monterrey' : [('Nuevo Laredo',5), ('Monclova',5),('Torreon',5)],
			'Torreon' : [('Monclova',5)],
			'Nuevo Laredo' : [('Piedras Negras',5)],
			'Piedras Negras' : [('Monclova',5)],
			'Monclova' : [('Ojinaga',5)],
			'Culiacan' : [('Topolobampo',5), ('Hidalgo del Parral', 5)],
			'Ojinaga' : [('Chihuahua',5)],
			'Hidalgo del Parral' :  [('Chihuahua',5)],
			'Chihuahua' : [('Juarez',5),('Janos',5)],
			'Juarez' : [],
			'Topolobampo' : [('Ciudad Obregon', 5),('Hidalgo del Parral', 5)],
			'Ciudad Obregon' : [('Guaymas',5)],
			'Guaymas' : [('Hermosillo',5)],
			'Hermosillo' : [('Santa Ana',5)],
			'Janos' : [('Agua Prieta',5)],
			'Agua Prieta' : [('Santa Ana',5)],
			'Santa Ana' : [('Mexicalli',5)],
			'Mexicalli' : [('San Felipe',5), ('Tijuana',5)],
			'Tijuana' : [('Ensenada',5)],
			'San Felipe' : [('Ensenada',5)],
			'Ensenada' : [('San Quintina',5)],
			'San Quintina' : [('Santa Rosalia',5)],
			'Santa Rosalia' : [('Santo Domingo',5)],
			'Santo Domingo' : [('La Paz',5)],
			'La Paz' : [('Cabo San Lucas',5)],
			'Cabo San Lucas' : []
		}

#Grafo con los pesos correspondientes
grafo_con_pesos = {
      		'Cancún': {'Valladolid': 90, 'Felipe Carrillo Puerto' : 100 },
		  	'Valladolid' : {'Felipe Carrillo Puerto': 90 },
      		'Felipe Carrillo Puerto': {'Campeche' : 60 },
			'Campeche': { 'Merida': 90, 'Chetumal': 100, 'Ciudad del Carmen' : 90 },
			'Merida': {},
			'Chetumal': {'Francisco Escarcega' : 110 },
			'Francisco Escarcega' : {},
			'Ciudad del Carmen': {'Villa Hermosa': 90, 'Tuxtla' : 90 },
			'Villa Hermosa': { 'Acayucan': 90 }, 
			'Tuxtla': { 'Acayucan' : 90 },
			'Acayucan': {'Tehuantepec': 80, 'Alvarado' : 110 },
			'Tehuantepec' : {},
			'Alvarado'  : { 'Oaxaca' : 100 },
			'Oaxaca' : { 'Puerto Angel': 90 , 'Tehuacan': 80, 'Izucar de Matamoros': 90 },
			'Tehuacan' : {},
			'Puerto Angel' : { 'Pinotepa Nacional' : 100 },
			'Pinotepa Nacional' : {'Acapulco': 100 },
			'Acapulco' : { 'Chilpancingo' : 140 },
			'Chilpancingo' : { 'Iguala': 90 },
			'Iguala' : { 'Cuernavaca' : 100, 'Ciudad Altamirano': 110 },
			'Izucar de Matamoros' : {'Puebla': 90,'Cuernavaca':100 },
			'Puebla' : {'Cordoba':80,'Cdmx' :90 },
			'Cordoba' : {'Veracruz':90 },
			'Veracruz' : {},
			'Cuernavaca' : {'Cdmx':100, 'Ciudad Altamirano': 100},
			'Cdmx' : {'Pachuca de Soto':100,'Queretaro':90,'Toluca de Lerdo':110,'Tlaxcala':100},
			'Tlaxcala' : {},
			'Toluca de Lerdo' : {'Ciudad Altamirano':100 },
			'Ciudad Altamirano' : {'Zihuatanejo':90},
			'Zihuatanejo' : {'Playa Azul':90},
			'Playa Azul' : {'Morelia':100,'Colima':100,'Manzanillo':100},
			'Morelia' : {'Colima':90, 'Salamanca':90},
			'Colima' : {'Manzanillo':50, 'Guadalajara':50},
			'Manzanillo' : {'Guadalajara':80},
			'Guadalajara' : {'Tepic':110,'Aguascalientes':70},
			'Salamanca' : {'Guanajuato':90,'Guadalajara':90},
      		'Guanajuato' : { 'Aguascalientes' : 80 },
     		'Aguascalientes' : {'San Luis Potosi': 100 },
			'Queretaro' : {'Salamanca':90, 'Atlacomulco': 90, 'San Luis Potosi' :90 },
			'Atlacomulco' : {},
			'Pachuca de Soto' : {'Tuxpan de Rodiguez Cano':110},
			'Tuxpan de Rodiguez Cano' : {'Tampico':80},
			'Tampico' : {'Ciudad Victoria':80},
			'Ciudad Victoria' : {'Soto la Marina':80,'Matamoros':80,'Monterrey':80,'Durango':80 },
			'Soto la Marina' : {},
			'San Luis Potosi' : {'Zacatecas': 90, 'Durango':70},
			'Zacatecas' :  {},
			'Tepic' : {'Mazatlan': 110},
			'Mazatlan' : {'Culiacan':90 },
			'Durango' : {'Mazatlan': 90, 'Hidalgo del Parral': 90, 'Torreon': 110 },
			'Torreon' : {'Monclova': 110 },
			'Matamoros' : { 'Reynosa': 90 },
			'Reynosa' : {'Nuevo Laredo' : 100 },
			'Monterrey' : {'Nuevo Laredo': 110 , 'Monclova' :70 },
			'Nuevo Laredo' : { 'Piedras Negras' : 100 },
			'Piedras Negras' : { 'Monclova': 100 },
			'Monclova' : {'Ojinaga': 140 },
			'Culiacan' : {'Topolobampo':110, 'Hidalgo del Parral': 80 },
			'Ojinaga' : {'Chihuahua':90 },
			'Hidalgo del Parral' :  {'Chihuahua' :130 },
			'Chihuahua' : {'Juarez':90,'Janos':90 },
			'Juarez' : {},
			'Topolobampo' : {'Ciudad Obregon': 90, 'Hidalgo del Parral': 110 },
			'Ciudad Obregon' : {'Guaymas':80 },
			'Guaymas' : {'Hermosillo':80 },
			'Hermosillo' : {'Santa Ana': 60 },
			'Janos' : {'Agua Prieta' : 110 },
			'Agua Prieta' : {'Santa Ana': 60 },
			'Santa Ana' : {'Mexicalli': 150 },
			'Mexicalli' : {'San Felipe': 70, 'Tijuana' : 110},
			'Tijuana' : {'Ensenada' : 50 },
			'San Felipe' : {'Ensenada' :50 },
			'Ensenada' : {'San Quintina':60 },
			'San Quintina' : {'Santa Rosalia': 60},
			'Santa Rosalia' : {'Santo Domingo' :60},
			'Santo Domingo' : {'La Paz':70 },
			'La Paz' : {'Cabo San Lucas':70 },
			'Cabo San Lucas' : {}
		}


#Grafo con pesos iguales invertido 
grafo_pesos_iguales_invertido = {
	'Cabo San Lucas' : [('La Paz', 5)],
 	'La Paz' : [('Santo Domingo',5)],
	'Santo Domingo' : [('Santa Rosalia',5)],
	'Santa Rosalia' : [('Santa Quintin',5)],
	'Santa Quintin' : [('Ensenada',5)],
 	'Ensenada' : [('San Felipe',5), ('Tijuana',5)],
	'San Felipe' : [('Mexicalli',5)],
	'Tijuana' : [('Mexicalli',5)],
	'Mexicalli' : [('Santa Ana',5)],
	'Santa Ana' : [('Agua Prieta',5), ('Hermosillo',5)],
	'Agua Prieta' : [('Janos',5)],
	'Hermosillo' : [('Guaymas',5)],
	'Janos' : [('Chihuahua',5)],
	'Guaymas' : [('Ciudad Obregon',5)],
	'Ciudad Obregon' : [('Topolobampo',5)],
	'Chihuahua' : [('Juarez', 5), ('Ojinaga',5), ('Hidalgo del Parral',5)],
	'Juarez' : [],
	'Topolobampo' : [('Hidalgo del Parral',5), ('Culiacan',5)],
	'Hidalgo del Parral' : [('Durango',5), ('Culiacan',5)],
	'Culiacan' : [('Mazatlan',5)],
	'Mazatlan' : [('Durango',5),('Tepic',5)],
 	'Tepic' : [('Guadalajara',5)],
	'Ojinaga' : [('Monclava',5)],
	'Monclava' : [('Piedras Negras',5), ('Monterrey',5), ('Torreon',5)],
	'Torreon' : [('Durango',5)],
	'Piedras Negras' : [('Nuevo Laredo',5)],
	'Nuevo Laredo' : [('Reynosa',5), ('Monterrey',5)],
 	'Reynosa' : [('Matamoros',5)],
	'Matamoros' : [('Ciudad Victoria',5)],
	'Ciudad Victoria' : [('Tampico',5), ('Soto la Marina',5)],
	'Soto la Marina' : [],
    'Monterrey' : [('Ciudad Victoria',5)],
	'Durango' : [('Ciudad Victoria',5), ('San Luis Potosi',5)],
	'Zacatecas' : [],
	'San Luis Potosi' : [('Aguascalientes',5), ('Queretaro',5), ('Zacatecas',5)],
	'Aguascalientes' : [('Guadalajara', 5), ('Guanajuato',5)],
	'Guanajuato' : [('Salamanca',5)],
	'Guadalajara' : [('Salamanca',5), ('Colima',5), ('Manzanillo',5)],
	'Manzanillo' : [('Colima', 5), ('Playa Azul',5)],
	'Colima' : [('Morelia',5),('Playa Azul',5)],
	'Salamanca' : [('Morelia',5),('Queretaro',5)],
	'Atlacomulco' : [],
 	'Queretaro' : [('Cdmx',5), ('Atlacomulco',5)],
	'Tlaxcala' : [],
 	'Tampico' : [('Tuxpan de Rodiguez Cano',5)],
	'Tuxpan de Rodiguez Cano' : [('Pachuca de Soto',5)],
	'Pachuca de Soto' : [('Cdmx',5)],
	'Playa Azul' : [('Zihuatanejo',5)],
	'Zihuatanejo' : [('Ciudad Altamirano',5)],
	'Ciudad Altamirano' : [('Toluca de Lerdo', 5), ('Cuernavaca', 5), ('Iguala', 5)],
    'Iguala' : [('Chilpancingo', 5)],
	'Chilpancingo' : [('Acapulco',5)],
	'Acapulco' : [('Pinotepa Nacional', 5)],
 	'Pinotepa Nacional' : [('Puerto Angel',5)],
	'Puerto Angel' : [('Oaxaca',5)],
	'Oaxaca' : [('Tehuacan',5)],
	'Cdmx' : [('Cuernavaca',5), ('Puebla',5), ('Tlaxcala',5)],
	'Cuernavaca' :[('Iguala',5), ('Izucar de Matamoros',5)],
	'Puebla' : [('Izucar de Matamoros',5), ('Cordoba',5)],
	'Vercruz' : [],
	'Cordoba' : [('Veracruz',5)],
	'Izucar de Matamoros' : [('Oaxaca',5)],
	'Tehuacan' : [],
	'Oaxaca' : [('Alvarado',5)], 
    'Alvarado' : [('Ayucan',5)],
    'Acayucan' : [('Villa Hermosa', 5), ('Tuxtla',5), ('Tehuantepec',5)],
    'Tehuantepec' : [],
    'Tuxtla' : [('Ciudad del Carmen',5)],
    'Villa Hermosa' : [('Ciudad del Carmen',5)],
    'Ciudad del Carmen' : [('Campeche',5)],
    'Campeche' : [('Merida',5),('Felipe Carrillo Puerto',5),('Chetumal',5)],
    'Merida' : [],
    'Francisco Escarcega' : [],
    'Chetumal' : [('Francisco Escarcega',5)],
    'Felipe Carrillo Puerto' : [('Valladolid', 5), ('Cancún',5)],
    'Valladolid' : [('Cancún', 5)],
    'Cancún' : []  
}
lista_de_tipos_totales = []
banderaOrigen = False
banderaDestino = False

imprimir(grafo_pesos_iguales)

while not banderaOrigen:
	destino = input("Ingresa el nodo de destino: ")
	origen_verificado = destino.title()
	banderaOrigen = verificacion(origen_verificado)

while not banderaDestino:
	destino = input("Ingresa el nodo de destino: ")
	destino_verificado = destino.title()
	banderaDestino = verificacion(destino_verificado)

limite = int(input("Ingrese el límite: "))

#Comparación de pesos
print("\nDel grafo 1:")
compara_pesos(grafo_pesos_iguales)
print("\n---------------------------------------------------------")
print("Del grafo 2:")
compara_pesos(grafo_con_pesos)

#Búsqueda a los ancho
print("\nBúsqueda a lo ancho:")
tiempo_inicio = time.time()
Busqueda_a_lo_ancho(grafo_pesos_iguales, str(origen_verificado), str(destino_verificado))
tiempo_fin = time.time()
# Calcular la diferencia entre ambos tiempos
tiempo_total_a_lo_ancho = tiempo_fin - tiempo_inicio
print("La función tardó", tiempo_total_a_lo_ancho, "segundos en ejecutarse")

print("----------------------------------------------------------\n")
#Búsqueda por Dijkstra
print("Dijkstra:")
tiempo_inicio = time.time()
mensaje = dijkstra(grafo_con_pesos, str(origen_verificado), str(destino_verificado))
tiempo_fin = time.time()
# Calcular la diferencia entre ambos tiempos
tiempo_total_dijkstra = tiempo_fin - tiempo_inicio
print("La función tardó", tiempo_total_dijkstra, "segundos en ejecutarse")
if mensaje is None:
    print(f"No se encontró ruta desde {origen_verificado} hasta {destino_verificado}.")
else:
    distancia, camino = mensaje
    print(f"La ruta más corta desde {origen_verificado} hasta {destino_verificado} es: {camino}")
    print(f"Su peso es: {distancia}")

print("----------------------------------------------------------\n")
#Búsqueda por profundidad "simple"
print("Búsqueda por profundidad:")
tiempo_inicio = time.time()
ruta = busqueda_profundidad_con_peso(grafo_con_pesos, str(origen_verificado), str(destino_verificado))
tiempo_fin = time.time()
# Calcular la diferencia entre ambos tiempos
tiempo_total_simple = tiempo_fin - tiempo_inicio
print("La función tardó", tiempo_total_simple, "segundos en ejecutarse")
print("Camino encontrado = ", ' -> '.join(ruta))

print("----------------------------------------------------------\n")
#Búsqueda por profundidad limitada
print("Búsqueda por profundidad limitada:")
ruta = [origen_verificado]
visitados = []
tiempo_inicio = time.time()
profundidad_limitada(grafo_con_pesos, str(origen_verificado), str(destino_verificado), limite, ruta, visitados)
tiempo_fin = time.time()
# Calcular la diferencia entre ambos tiempos
tiempo_total_limitada = tiempo_fin - tiempo_inicio
print("La función tardó", tiempo_total_limitada, "segundos en ejecutarse")

print("----------------------------------------------------------\n")
#Búsqueda por profundidad iterativa
print("Búsqueda por profundidad iterativa:")
tiempo_inicio = time.time()
ruta_iterativa = busqueda_profundidad_iterativa(grafo_con_pesos, str(origen_verificado), str(destino_verificado))
tiempo_fin = time.time()
# Calcular la diferencia entre ambos tiempos
tiempo_total_iterativa = tiempo_fin - tiempo_inicio
print("La función tardó", tiempo_total_iterativa, "segundos en ejecutarse")
print(ruta_iterativa)

print("----------------------------------------------------------\n")
#Búsqueda bidireccional
print("Búsqueda bidireccional:")
tiempo_inicio = time.time()
ruta_bi, interseccion = bfs_bidireccional(grafo_pesos_iguales, grafo_pesos_iguales_invertido, str(origen_verificado), str(destino_verificado))
tiempo_fin = time.time()
# Calcular la diferencia entre ambos tiempos
tiempo_total_didireccional = tiempo_fin - tiempo_inicio
print("La función tardó", tiempo_total_didireccional, "segundos en ejecutarse")
if ruta_bi is not None:
    print("La mejor ruta es:", ruta_bi)
    print("El nodo de intersección es:", interseccion)
else:
    print("No se encontró ninguna ruta entre los nodos especificados")
    
print("----------------------------------------------------------\n")

#Se egregan los tiempos totales de los algoritmos a una lista
lista_de_tipos_totales.append(tiempo_total_a_lo_ancho)
lista_de_tipos_totales.append(tiempo_total_dijkstra)
lista_de_tipos_totales.append(tiempo_total_simple)
lista_de_tipos_totales.append(tiempo_total_limitada)
lista_de_tipos_totales.append(tiempo_total_iterativa)
lista_de_tipos_totales.append(tiempo_total_didireccional)

#Creamos una variable en la cual va a sacar el tiempo menor
menor_tiempo = min(lista_de_tipos_totales)

#Switch para saber cual de los tiempos de los argoritmos fue el menor
if menor_tiempo == tiempo_total_a_lo_ancho:
	print('El algoritmo de búsqueda más eficiente: Búsqueda a los ancho')
	print('Con un tiempo de: ', menor_tiempo)
elif menor_tiempo == tiempo_total_dijkstra:
	print('El algoritmo de búsqueda más eficiente: Búsqueda por Dijkstra')
	print('Con un tiempo de: ', menor_tiempo)
elif menor_tiempo == tiempo_total_simple:
	print('El algoritmo de búsqueda más eficiente: Búsqueda por profundidad')
	print('Con un tiempo de: ', menor_tiempo)
elif menor_tiempo == tiempo_total_limitada:
	print('El algoritmo de búsqueda más eficiente: Búsqueda por profundidad limitada')
	print('Con un tiempo de: ', menor_tiempo)
elif menor_tiempo == tiempo_total_iterativa:
	print('El algoritmo de búsqueda más eficiente: Búsqueda por profundidad iterativa')
	print('Con un tiempo de: ', menor_tiempo)
elif menor_tiempo == tiempo_total_didireccional:
	print('El algoritmo de búsqueda más eficiente: Búsqueda bidireccional')
	print('Con un tiempo de: ', menor_tiempo)
#Validación de error si no muestra ningún tiempo
else:
	print('error')