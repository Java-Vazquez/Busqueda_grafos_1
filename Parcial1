from collections import defaultdict
import heapq

#BÚSQUEDA A LO ANCHO
def Busqueda_a_lo_ancho(grafo, origen, destino):
	visitados = []
	caminos = [[origen]]
	porVisitar = [] 
	
	if origen == destino:
		print("Ya se encuentra en el destino")
		return
	
	while caminos:
		ruta = caminos.pop(0)
		actual = ruta[-1]

		if actual not in visitados:
			for key, lista in grafo[actual]:
				if key not in visitados:
					porVisitar.append(key)
		 
			for hijo in porVisitar:
				ruta_actual = list(ruta)
				ruta_actual.append(hijo)
				caminos.append(ruta_actual)
				
				if hijo == destino:
					print("Mejor camino = ", ' -> '.join(ruta_actual))
					return
			visitados.append(actual)
	 
	print("No existe una manera de llegar de ese desde ", *origen," hasta ", *destino)
	return


#BÚSQUEDA DIJKSTRA
def dijkstra(grafo, inicio, fin):
    # Inicializar distancia a cada nodo como infinita, excepto al nodo inicial que tiene distancia 0
    distancias = {nodo: float('inf') for nodo in grafo}
    distancias[inicio] = 0

    # Inicializar cola con el nodo inicial y su distancia
    cola = [(0, inicio)]

    # Inicializar diccionario para llevar registro del camino más corto a cada nodo
    camino = {inicio: []}

    while cola:
        # Obtener el nodo con menor distancia hasta el momento
        (dist, nodo_actual) = heapq.heappop(cola)

        # Si llegamos al nodo final, retornar el camino más corto y su distancia
        if nodo_actual == fin:
            return (dist, camino[nodo_actual] + [nodo_actual])

        # Si ya procesamos el nodo actual en una iteración previa, continuar con el siguiente
        if dist > distancias[nodo_actual]:
            continue

        # Recorrer los nodos hijos del nodo actual
        for hijo, peso in grafo[nodo_actual].items():
            # Calcular la distancia acumulada con el nodo hijo
            nueva_distancia = dist + peso

            # Si encontramos un camino más corto, actualizar la distancia y la cola
            if nueva_distancia < distancias[hijo]:
                distancias[hijo] = nueva_distancia
                heapq.heappush(cola, (nueva_distancia, hijo))
                camino[hijo] = camino[nodo_actual] + [nodo_actual]

    # Si no encontramos una ruta al nodo final, regresar None
    return None
	
#Búsqueda por profundidad
# Definimos la función para realizar la búsqueda por profundidad
def busqueda_profundidad_con_peso(grafo, nodo_inicial, nodo_final):
    # Creamos una lista para almacenar los nodos visitados
    visitados = []
    # Creamos una pila para almacenar los nodos por visitar
    pila = [(nodo_inicial, [])]
    # Mientras la pila no esté vacía
    while pila:
        # Obtenemos el siguiente nodo a visitar y la ruta hasta el mismo
        nodo, ruta = pila.pop()
        # Si no hemos visitado el nodo aún
        if nodo not in visitados:
            # Lo añadimos a la lista de visitados
            visitados.append(nodo)
            # Si llegamos al nodo final, terminamos la búsqueda
            if nodo == nodo_final:
                ruta.append(nodo)
                break
            # Obtenemos los vecinos del nodo actual
            vecinos = grafo[nodo]
            # Añadimos los vecinos a la pila para visitarlos posteriormente
            for vecino, peso_vecino in vecinos.items():
                pila.append((vecino, ruta + [nodo]))
    # Devolvemos la ruta encontrada
    return ruta


#CREACIÓN DE GRAFOS
#Grafo de busqueda a lo ancho
#Grafo con los pesos iguales a 5 en todas las rutas
grafo_pesos_iguales = {'Cancún': [('Valladolid',5), ('Felipe Carrillo Puerto',5)],
		  'Valladolid' : [('Felipe Carrillo Puerto',5)],
      'Felipe Carrillo Puerto': [('Campeche',5)],
			'Campeche': [('Merida',5),('Chetumal',5),('Ciudad del Carmen',5) ],
			'Merida':[],
			'Chetumal': [('Francisco Escarcega',5)],
			'Francisco Escarcega' : [],
			'Ciudad del Carmen': [('Villa Hermosa',5),('Tuxtla',5)],
			'Villa Hermosa': [('Acayucan',5)], 
			'Tuxtla': [('Acayucan',5)],
			'Acayucan': [('Tehuacantepec',5), ('Alvarado',5)],
			'Tehuacantepec' : [],
			'Alvarado'  : [('Oaxaca',5)],
			'Oaxaca' : [('Puerto Angel',5),('Tehuacan',5),('Izucar de Matamoros',5)],
			'Tehuacan' : [],
			'Puerto Angel' : [('Pinotepa Nacional',5)],
			'Pinotepa Nacional' : [('Acapulco',5)],
			'Acapulco' : [('Chilpancingo',5)],
			'Chilpancingo' : [('Iguala',5)],
			'Iguala' : [('Cuernavaca',5),('Ciudad Altamirano',5)],
			'Izucar de Matamoros' : [('Puebla',5),('Cuernavaca',5)],
			'Puebla' : [('Cordoba',5),('CDMX',5)],
			'Cordoba' : [('Veracruz',5)],
			'Veracruz' : [],
			'Cuernavaca' : [('CDMX',5), ('Ciudad Altamirano',5)],
			'CDMX' : [('Pachuca de Soto',5),('Queretaro',5),('Toluca de Lerdo',5),('Tlaxcala',5)],
			'Tlaxcala' : [],
			'Toluca de Lerdo' : [('Ciudad Altamirano',5)],
			'Ciudad Altamirano' : [('Zihuatanejo',5)],
			'Zihuatanejo' : [('Playa Azul',5)],
			'Playa Azul' : [('Morelia',5), ('Colima',5), ('Manzanillo',5)],
			'Morelia' : [('Colima',5), ('Salamanca',5)],
			'Colima' : [('Manzanillo',5), ('Guadalajara',5)],
			'Manzanillo' : [('Guadalajara',5)],
			'Guadalajara' : [('Tepic',5),('Aguascalientes',5)],
			'Salamanca' : [('Guanajuato',5),('Guadalajara',5)],
      'Guanajuato' : [('Aguascalientes',5)],
      'Aguascalientes' : [('San Luis Potosi',5)],
			'Queretaro' : [('Salamanca',5), ('Atlacomulco',5), ('San Luis Potosi',5)],
			'Atlacomulco' : [],
			'Pachuca de Soto' : [('Tuxpan de Rodiguez Cano',5)],
			'Tuxpan de Rodiguez Cano' : [('Tampico',5)],
			'Tampico' : [('Ciudad Victoria',5)],
			'Ciudad Victoria' : [('Soto la Marina',5), ('Matamoros',5), ('Monterrey',5), ('Durango',5)],
			'Soto la Marina' : [],
			'San Luis Potosi' : [('Zacatecas', 5), ('Durango',5)],
			'Zacatecas' :  [],
			'Tepic' : [('Mazatlan', 5)],
			'Mazatlan' : [('Culiacan',5)],
			'Durango' : [('Mazatlan', 5),('Hidalgo del Parral', 5)],
			'Matamoros' : [('Reynosa',5)],
			'Reynosa' : [('Nuevo Laredo',5)],
			'Monterrey' : [('Nuevo Laredo',5), ('Monclova',5),('Torreon',5)],
			'Torreon' : [('Monclova',5)],
			'Nuevo Laredo' : [('Piedras Negras',5)],
			'Piedras Negras' : [('Monclova',5)],
			'Monclova' : [('Ojinaga',5)],
			'Culiacan' : [('Topolobampo',5), ('Hidalgo del Parral', 5)],
			'Ojinaga' : [('Chihuahua',5)],
			'Hidalgo del Parral' :  [('Chihuahua',5)],
			'Chihuahua' : [('Juarez',5),('Janos',5)],
			'Juarez' : [],
			'Topolobampo' : [('Ciudad Obregon', 5),('Hidalgo del Parral', 5)],
			'Ciudad Obregon' : [('Guaymas',5)],
			'Guaymas' : [('Hermosillo',5)],
			'Hermosillo' : [('Santa Ana',5)],
			'Janos' : [('Agua Prieta',5)],
			'Agua Prieta' : [('Santa Ana',5)],
			'Santa Ana' : [('Mexicalli',5)],
			'Mexicalli' : [('San Felipe',5), ('Tijuana',5)],
			'Tijuana' : [('Ensenada',5)],
			'San Felipe' : [('Ensenada',5)],
			'Ensenada' : [('San Quintina',5)],
			'San Quintina' : [('Santa Rosalia',5)],
			'Santa Rosalia' : [('Santo Domingo',5)],
			'Santo Domingo' : [('La Paz',5)],
			'La Paz' : [('Cabo San Lucas',5)],
			'Cabo San Lucas' : []
		}


grafo_con_pesos = {
      'Cancún': {'Valladolid': 90, 'Felipe Carrillo Puerto' : 100 },
		  'Valladolid' : {'Felipe Carrillo Puerto': 90 },
      'Felipe Carrillo Puerto': {'Campeche' : 60 },
			'Campeche': { 'Merida': 90, 'Chetumal': 100, 'Ciudad del Carmen' : 90 },
			'Merida': {},
			'Chetumal': {'Francisco Escarcega' : 110 },
			'Francisco Escarcega' : {},
			'Ciudad del Carmen': {'Villa Hermosa': 90, 'Tuxtla' : 90 },
			'Villa Hermosa': { 'Acayucan': 90 }, 
			'Tuxtla': { 'Acayucan' : 90 },
			'Acayucan': {'Tehuacantepec': 80, 'Alvarado' : 110 },
			'Tehuacantepec' : {},
			'Alvarado'  : { 'Oaxaca' : 100 },
			'Oaxaca' : { 'Puerto Angel': 90 , 'Tehuacan': 80, 'Izucar de Matamoros': 90 },
			'Tehuacan' : {},
			'Puerto Angel' : { 'Pinotepa Nacional' : 100 },
			'Pinotepa Nacional' : {'Acapulco': 100 },
			'Acapulco' : { 'Chilpancingo' : 140 },
			'Chilpancingo' : { 'Iguala': 90 },
			'Iguala' : { 'Cuernavaca' : 100, 'Ciudad Altamirano': 110 },
			'Izucar de Matamoros' : {'Puebla': 90,'Cuernavaca':100 },
			'Puebla' : {'Cordoba':80,'CDMX' :90 },
			'Cordoba' : {'Veracruz':90 },
			'Veracruz' : {},
			'Cuernavaca' : {'CDMX':100, 'Ciudad Altamirano': 100},
			'CDMX' : {'Pachuca de Soto':100,'Queretaro':90,'Toluca de Lerdo':110,'Tlaxcala':100},
			'Tlaxcala' : {},
			'Toluca de Lerdo' : {'Ciudad Altamirano':100 },
			'Ciudad Altamirano' : {'Zihuatanejo':90},
			'Zihuatanejo' : {'Playa Azul':90},
			'Playa Azul' : {'Morelia':100,'Colima':100,'Manzanillo':100},
			'Morelia' : {'Colima':90, 'Salamanca':90},
			'Colima' : {'Manzanillo':50, 'Guadalajara':50},
			'Manzanillo' : {'Guadalajara':80},
			'Guadalajara' : {'Tepic':110,'Aguascalientes':70},
			'Salamanca' : {'Guanajuato':90,'Guadalajara':90},
      'Guanajuato' : { 'Aguascalientes' : 80 },
      'Aguascalientes' : {'San Luis Potosi': 100 },
			'Queretaro' : {'Salamanca':90, 'Atlacomulco': 90, 'San Luis Potosi' :90 },
			'Atlacomulco' : {},
			'Pachuca de Soto' : {'Tuxpan de Rodiguez Cano':110},
			'Tuxpan de Rodiguez Cano' : {'Tampico':80},
			'Tampico' : {'Ciudad Victoria':80},
			'Ciudad Victoria' : {'Soto la Marina':80,'Matamoros':80,'Monterrey':80,'Durango':80 },
			'Soto la Marina' : {},
			'San Luis Potosi' : {'Zacatecas': 90, 'Durango':70},
			'Zacatecas' :  {},
			'Tepic' : {'Mazatlan': 110},
			'Mazatlan' : {'Culiacan':90 },
			'Durango' : {'Mazatlan': 90, 'Hidalgo del Parral': 90, 'Torreon': 110 },
			'Torreon' : {'Monclova': 110 },
			'Matamoros' : { 'Reynosa': 90 },
			'Reynosa' : {'Nuevo Laredo' : 100 },
			'Monterrey' : {'Nuevo Laredo': 110 , 'Monclova' :70 },
			'Nuevo Laredo' : { 'Piedras Negras' : 100 },
			'Piedras Negras' : { 'Monclova': 100 },
			'Monclova' : {'Ojinaga': 140 },
			'Culiacan' : {'Topolobampo':110, 'Hidalgo del Parral': 80 },
			'Ojinaga' : {'Chihuahua':90 },
			'Hidalgo del Parral' :  {'Chihuahua' :130 },
			'Chihuahua' : {'Juarez':90,'Janos':90 },
			'Juarez' : {},
			'Topolobampo' : {'Ciudad Obregon': 90, 'Hidalgo del Parral': 110 },
			'Ciudad Obregon' : {'Guaymas':80 },
			'Guaymas' : {'Hermosillo':80 },
			'Hermosillo' : {'Santa Ana': 60 },
			'Janos' : {'Agua Prieta' : 110 },
			'Agua Prieta' : {'Santa Ana': 60 },
			'Santa Ana' : {'Mexicalli': 150 },
			'Mexicalli' : {'San Felipe': 70, 'Tijuana' : 110},
			'Tijuana' : {'Ensenada' : 50 },
			'San Felipe' : {'Ensenada' :50 },
			'Ensenada' : {'San Quintina':60 },
			'San Quintina' : {'Santa Rosalia': 60},
			'Santa Rosalia' : {'Santo Domingo' :60},
			'Santo Domingo' : {'La Paz':70 },
			'La Paz' : {'Cabo San Lucas':70 },
			'Cabo San Lucas' : {}
		}


origen = input("Ingresa el nodo de origen: ")
destino = input("Ingresa el nodo de destino: ")

#Búsqueda a los ancho
print("\nBúsqueda a lo ancho:")
Busqueda_a_lo_ancho(grafo_pesos_iguales, str(origen), str(destino))
print("----------------------------------------------------------\n")
#Búsqueda por Dijkstra
print("Dijkstra:")
mensaje = dijkstra(grafo_con_pesos, str(origen), str(destino))
if mensaje is None:
    print(f"No se encontró ruta desde {origen} hasta {destino}.")
else:
    distancia, camino = mensaje
    print(f"La ruta más corta desde {origen} hasta {destino} es: {camino}")
    print(f"Su peso es: {distancia}")
print("----------------------------------------------------------\n")
#Búsqueda por profundidad
print("Búsqueda por profundidad:")
ruta = busqueda_profundidad_con_peso(grafo_con_pesos, str(origen), str(destino))
print("Camino encontrado = ", ' -> '.join(ruta))